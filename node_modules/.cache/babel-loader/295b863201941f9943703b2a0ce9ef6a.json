{"ast":null,"code":"var _jsxFileName = \"/Users/maks/Git/todoapp/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AddList from './components/AddList';\nimport List from './components/List';\nimport Tasks from './components/Tasks';\nimport listSvg from \"./assets/img/list.svg\";\nimport doIt from './assets/img/do-it.png';\nimport './css/reset.css';\nimport './css/index.min.css';\nimport './css/List.min.css';\nimport './css/AddList.min.css';\nimport './css/Tasks.min.css';\nimport './css/AddTasks.min.css';\n\nfunction App() {\n  const [lists, setLists] = useState(null);\n  const [colors, setColors] = useState(null);\n  const [activeItem, setActiveItem] = useState({\n    allTasks: true,\n    id: 0\n  });\n  console.log(colors);\n  useEffect(() => {\n    axios({\n      method: 'get',\n      url: 'https://tojustdoit-api.herokuapp.com/colors',\n      responseType: 'json'\n    }).then(function (response) {\n      console.log(response.json());\n      setColors(response.json());\n    }).catch(function (error) {\n      alert(`Database failed :((\\nTry to reload the page`);\n    });\n    fetch('https://tojustdoit-api.herokuapp.com/lists').then(res => res.json()).catch(function (error) {\n      alert(`Database failed :((\\nTry to reload the page`);\n    }).then(data => {\n      setLists(data);\n    });\n  }, []);\n\n  const onAddList = obj => {\n    setLists([...lists, obj]);\n  };\n\n  const onAddTask = (obj, id) => {\n    setLists(lists.map(i => {\n      if (i.id === id) {\n        i.tasks = [...i.tasks, obj];\n      }\n\n      return i;\n    }));\n  };\n\n  const onCompleteTask = (taskId, listId) => {\n    setLists(lists.map(list => {\n      if (list.id === listId) {\n        list.tasks.map(task => {\n          if (task.id === taskId) {\n            task.completed = !task.completed;\n          }\n\n          return task;\n        });\n      }\n\n      return list;\n    }));\n  };\n\n  const onEditTitle = (id, newTitle) => {\n    const newLists = lists.map(i => {\n      if (i.id === id) {\n        i.name = newTitle;\n      }\n\n      return i;\n    });\n    setLists(newLists);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"todo__sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    items: [{\n      icon: /*#__PURE__*/React.createElement(\"img\", {\n        src: listSvg,\n        alt: \"list icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 19\n        }\n      }),\n      name: 'All tasks',\n      allTasks: true,\n      active: true,\n      id: 0\n    }],\n    activeItem: activeItem,\n    onClickItem: i => {\n      i.active = true;\n      setActiveItem(i);\n    },\n    isRemovable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), lists ? /*#__PURE__*/React.createElement(List, {\n    items: lists,\n    onRemove: id => setLists(lists.filter(item => item.id !== id)),\n    onClickItem: i => {\n      i.active = true;\n      setActiveItem(i);\n    },\n    activeItem: activeItem,\n    isRemovable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: 10 + 'px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, \"Loading...\"), /*#__PURE__*/React.createElement(AddList, {\n    onAdd: onAddList,\n    colors: colors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"shai\",\n    src: doIt,\n    alt: \"list icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"todo__tasks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, lists ? /*#__PURE__*/React.createElement(Tasks, {\n    onEditTitle: onEditTitle,\n    lists: !activeItem.allTasks ? [activeItem] : lists,\n    onAddTask: onAddTask,\n    onCompleteTask: onCompleteTask,\n    onDeleteTask: (taskId, listId) => {\n      setLists(lists.map(list => {\n        if (list.id === listId) {\n          list.tasks = list.tasks.filter(item => item.id !== taskId);\n        }\n\n        return list;\n      }));\n    },\n    onUpdateTask: (taskId, listId, newText) => {\n      setLists(lists.map(list => {\n        if (list.id === listId) {\n          list.tasks.find(item => item.id === taskId).text = newText;\n        }\n\n        return list;\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 16\n    }\n  }) : \"\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/maks/Git/todoapp/src/App.js"],"names":["React","useState","useEffect","axios","AddList","List","Tasks","doIt","App","lists","setLists","colors","setColors","activeItem","setActiveItem","allTasks","id","console","log","method","url","responseType","then","response","json","catch","error","alert","fetch","res","data","onAddList","obj","onAddTask","map","i","tasks","onCompleteTask","taskId","listId","list","task","completed","onEditTitle","newTitle","newLists","name","icon","listSvg","active","filter","item","padding","newText","find","text"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAGA,OAAOC,IAAP,MAAkB,wBAAlB;AACA,OAAO,iBAAP;AACA,OAAO,qBAAP;AACA,OAAO,oBAAP;AACA,OAAO,uBAAP;AACA,OAAO,qBAAP;AACA,OAAO,wBAAP;;AAGA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC;AAC3Cc,IAAAA,QAAQ,EAAE,IADiC;AAC3BC,IAAAA,EAAE,EAAE;AADuB,GAAD,CAA5C;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACAT,EAAAA,SAAS,CAAC,MAAM;AAEdC,IAAAA,KAAK,CAAC;AACJgB,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAE,6CAFD;AAGJC,MAAAA,YAAY,EAAE;AAHV,KAAD,CAAL,CAKGC,IALH,CAKQ,UAAUC,QAAV,EAAoB;AACxBN,MAAAA,OAAO,CAACC,GAAR,CAAYK,QAAQ,CAACC,IAAT,EAAZ;AACAZ,MAAAA,SAAS,CAACW,QAAQ,CAACC,IAAT,EAAD,CAAT;AACD,KARH,EASGC,KATH,CASS,UAASC,KAAT,EAAe;AACpBC,MAAAA,KAAK,CAAE,6CAAF,CAAL;AAAqD,KAVzD;AAYAC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CAAoDN,IAApD,CAAyDO,GAAG,IAAIA,GAAG,CAACL,IAAJ,EAAhE,EAA4EC,KAA5E,CAAkF,UAASC,KAAT,EAAe;AAC/FC,MAAAA,KAAK,CAAE,6CAAF,CAAL;AAAqD,KADvD,EACyDL,IADzD,CAC8DQ,IAAI,IAAI;AACpEpB,MAAAA,QAAQ,CAACoB,IAAD,CAAR;AACD,KAHD;AAID,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,QAAMC,SAAS,GAAIC,GAAD,IAAQ;AACxBtB,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWuB,GAAX,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,SAAS,GAAI,CAACD,GAAD,EAAMhB,EAAN,KAAY;AAC7BN,IAAAA,QAAQ,CACND,KAAK,CAACyB,GAAN,CAAWC,CAAD,IAAO;AACf,UAAIA,CAAC,CAACnB,EAAF,KAASA,EAAb,EAAgB;AACdmB,QAAAA,CAAC,CAACC,KAAF,GAAU,CAAC,GAAGD,CAAC,CAACC,KAAN,EAAaJ,GAAb,CAAV;AACD;;AACD,aAAOG,CAAP;AACD,KALD,CADM,CAAR;AAQD,GATD;;AAWA,QAAME,cAAc,GAAC,CAACC,MAAD,EAASC,MAAT,KAAkB;AACrC7B,IAAAA,QAAQ,CAACD,KAAK,CAACyB,GAAN,CAAUM,IAAI,IACrB;AACE,UAAIA,IAAI,CAACxB,EAAL,KAAYuB,MAAhB,EACA;AACEC,QAAAA,IAAI,CAACJ,KAAL,CAAWF,GAAX,CAAeO,IAAI,IACjB;AACE,cAAIA,IAAI,CAACzB,EAAL,KAAUsB,MAAd,EAAqB;AACnBG,YAAAA,IAAI,CAACC,SAAL,GAAe,CAACD,IAAI,CAACC,SAArB;AACD;;AACD,iBAAOD,IAAP;AACD,SANH;AAQD;;AACH,aAAOD,IAAP;AACD,KAdQ,CAAD,CAAR;AAeD,GAhBD;;AAkBA,QAAMG,WAAW,GAAG,CAAC3B,EAAD,EAAK4B,QAAL,KAAkB;AACpC,UAAMC,QAAQ,GAAGpC,KAAK,CAACyB,GAAN,CAAWC,CAAD,IAAO;AAChC,UAAIA,CAAC,CAACnB,EAAF,KAAOA,EAAX,EAAc;AACZmB,QAAAA,CAAC,CAACW,IAAF,GAASF,QAAT;AACD;;AACD,aAAOT,CAAP;AACD,KALgB,CAAjB;AAMAzB,IAAAA,QAAQ,CAACmC,QAAD,CAAR;AACD,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAS,IAAA,SAAS,EAAC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAG,CACZ;AACEE,MAAAA,IAAI,eAAE;AAAK,QAAA,GAAG,EAAEC,OAAV;AAAmB,QAAA,GAAG,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADR;AAEEF,MAAAA,IAAI,EAAC,WAFP;AAGE/B,MAAAA,QAAQ,EAAE,IAHZ;AAIEkC,MAAAA,MAAM,EAAC,IAJT;AAKEjC,MAAAA,EAAE,EAAE;AALN,KADY,CAAd;AASA,IAAA,UAAU,EAAEH,UATZ;AAUA,IAAA,WAAW,EAAGsB,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACc,MAAF,GAAS,IAAT;AACAnC,MAAAA,aAAa,CAACqB,CAAD,CAAb;AAAiB,KAZnB;AAaA,IAAA,WAAW,EAAE,KAbb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAeG1B,KAAK,gBACN,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAGA,KAAd;AACA,IAAA,QAAQ,EAAKO,EAAD,IACVN,QAAQ,CAACD,KAAK,CAACyC,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACnC,EAAL,KAAYA,EAAjC,CAAD,CAFV;AAGA,IAAA,WAAW,EAAGmB,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACc,MAAF,GAAS,IAAT;AACAnC,MAAAA,aAAa,CAACqB,CAAD,CAAb;AAAiB,KALnB;AAMA,IAAA,UAAU,EAAEtB,UANZ;AAOA,IAAA,WAAW,MAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,gBASF;AAAK,IAAA,KAAK,EAAE;AAACuC,MAAAA,OAAO,EAAE,KAAK;AAAf,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAxBN,eAyBG,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAErB,SAAhB;AAA2B,IAAA,MAAM,EAAEpB,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBH,eA0BG;AAAK,IAAA,SAAS,EAAE,MAAhB;AAAsB,IAAA,GAAG,EAAEJ,IAA3B;AAAiC,IAAA,GAAG,EAAC,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BH,CADF,eA6BE;AAAS,IAAA,SAAS,EAAC,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,KAAK,gBAAC,oBAAC,KAAD;AACP,IAAA,WAAW,EAAEkC,WADN;AAEP,IAAA,KAAK,EAAE,CAAC9B,UAAU,CAACE,QAAZ,GAAqB,CAACF,UAAD,CAArB,GAAkCJ,KAFlC;AAGP,IAAA,SAAS,EAAEwB,SAHJ;AAIP,IAAA,cAAc,EAAEI,cAJT;AAKP,IAAA,YAAY,EAAE,CAACC,MAAD,EAASC,MAAT,KAAmB;AAC7B7B,MAAAA,QAAQ,CAACD,KAAK,CAACyB,GAAN,CAAUM,IAAI,IAAE;AACvB,YAAGA,IAAI,CAACxB,EAAL,KAAYuB,MAAf,EAAsB;AACpBC,UAAAA,IAAI,CAACJ,KAAL,GAAaI,IAAI,CAACJ,KAAL,CAAWc,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACnC,EAAL,KAAYsB,MAAtC,CAAb;AACD;;AACC,eAAOE,IAAP;AACD,OALM,CAAD,CAAR;AAOD,KAbI;AAeP,IAAA,YAAY,EAAE,CAACF,MAAD,EAASC,MAAT,EAAiBc,OAAjB,KAA2B;AACvC3C,MAAAA,QAAQ,CAACD,KAAK,CAACyB,GAAN,CAAUM,IAAI,IAAE;AACvB,YAAGA,IAAI,CAACxB,EAAL,KAAYuB,MAAf,EAAsB;AACpBC,UAAAA,IAAI,CAACJ,KAAL,CAAWkB,IAAX,CAAgBH,IAAI,IAAIA,IAAI,CAACnC,EAAL,KAAYsB,MAApC,EAA4CiB,IAA5C,GAAmDF,OAAnD;AACD;;AACC,eAAOb,IAAP;AACD,OALM,CAAD,CAAR;AAOD,KAvBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAD,GAyBH,EA1BL,CA7BF,CADA,CADF;AA8DD;;AAED,eAAehC,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react'; \nimport axios from 'axios'\n\nimport AddList from './components/AddList'\nimport List from './components/List'\nimport Tasks from './components/Tasks'\n\nimport listSvg from  './assets/img/list.svg'\nimport doIt from  './assets/img/do-it.png'\nimport './css/reset.css';\nimport './css/index.min.css';\nimport './css/List.min.css';\nimport './css/AddList.min.css';\nimport './css/Tasks.min.css';\nimport './css/AddTasks.min.css';\n\n\nfunction App() {\n  const [lists, setLists] = useState(null)\n  const [colors, setColors] = useState(null)\n  const [activeItem, setActiveItem] = useState({ \n    allTasks: true, id: 0\n   })\n  console.log(colors)\n  useEffect(() => {\n\n    axios({\n      method: 'get',\n      url: 'https://tojustdoit-api.herokuapp.com/colors',\n      responseType: 'json'\n    })\n      .then(function (response) {\n        console.log(response.json())\n        setColors(response.json())\n      })\n      .catch(function(error){\n        alert(`Database failed :((\\nTry to reload the page`)})\n\n    fetch('https://tojustdoit-api.herokuapp.com/lists').then(res => res.json()).catch(function(error){\n      alert(`Database failed :((\\nTry to reload the page`)}).then(data => {\n      setLists(data)\n    });\n  }, []);\n  \n  const onAddList = (obj) =>{\n    setLists([...lists, obj])\n  }\n\n  const onAddTask = ((obj, id) =>{\n    setLists(\n      lists.map((i) => {\n        if (i.id === id){\n          i.tasks = [...i.tasks, obj]\n        }\n        return i;\n      })\n    );\n  })\n\n  const onCompleteTask=(taskId, listId)=>{\n    setLists(lists.map(list=>\n      {\n        if (list.id === listId)\n        {\n          list.tasks.map(task =>\n            {\n              if (task.id===taskId){\n                task.completed=!task.completed;\n              }\n              return task\n            }\n          )\n        }\n      return list;\n    }))\n  }\n\n  const onEditTitle = (id, newTitle) => {\n    const newLists = lists.map((i) => {\n      if (i.id===id){\n        i.name = newTitle;\n      }\n      return i\n    });\n    setLists(newLists)\n  }\n\n  return (\n    <div className=\"app\">\n    <div className=\"todo\">\n      <section className=\"todo__sidebar\">\n        <List items= {[\n          { \n            icon: <img src={listSvg} alt=\"list icon\"/>,\n            name:'All tasks',\n            allTasks: true,\n            active:true,\n            id: 0\n           }\n        ]}\n        activeItem={activeItem}\n        onClickItem={(i) => {\n          i.active=true\n          setActiveItem(i)}}\n        isRemovable={false}/>\n        {lists?(\n        <List items= {lists} \n        onRemove = {(id)=>\n          setLists(lists.filter(item => item.id !== id))}\n        onClickItem={(i) => {\n          i.active=true\n          setActiveItem(i)}}\n        activeItem={activeItem}\n        isRemovable/>\n        ) : <div style={{padding: 10 + 'px'}}>Loading...</div>}\n         <AddList onAdd={onAddList} colors={colors}/>\n         <img className =\"shai\"src={doIt} alt=\"list icon\"/>\n      </section>\n      <section className=\"todo__tasks\">\n        {lists?<Tasks \n        onEditTitle={onEditTitle} \n        lists={!activeItem.allTasks?[activeItem]:lists}\n        onAddTask={onAddTask}\n        onCompleteTask={onCompleteTask}\n        onDeleteTask={(taskId, listId) =>{\n            setLists(lists.map(list=>{\n              if(list.id === listId){\n                list.tasks = list.tasks.filter(item => item.id !== taskId)\n              }\n                return list;\n              })\n            );\n          }\n        }\n        onUpdateTask={(taskId, listId, newText)=>{\n          setLists(lists.map(list=>{\n            if(list.id === listId){\n              list.tasks.find(item => item.id === taskId).text = newText\n            }\n              return list;\n            })\n          );\n        }\n      }\n        />:\"\"}\n      </section>\n    </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}