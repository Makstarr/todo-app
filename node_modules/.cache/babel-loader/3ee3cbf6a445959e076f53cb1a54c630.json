{"ast":null,"code":"import _slicedToArray from\"/Users/maks/Git/todoapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import classNames from'classnames';import axios from'axios';export default function Task(_ref){var task=_ref.task,checkTask=_ref.checkTask,onDeleteTask=_ref.onDeleteTask,onUpdateTask=_ref.onUpdateTask,Remove=_ref.Remove;var _useState=useState(task.text),_useState2=_slicedToArray(_useState,2),taskText=_useState2[0],setTaskText=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),taskIsUpdated=_useState4[0],updateTaskNow=_useState4[1];var updateTask=function updateTask(taskId,listId){onUpdateTask(taskId,listId,taskText);var data={id:taskId,newText:taskText};axios.post('https://tojustdoit-api.herokuapp.com/tasks-update',data).then(function(response){console.log(response);//Perform action based on response\n}).catch(function(){alert('Database error :((');}).finally(function(){updateTaskNow(true);});};var updateText=function updateText(event){setTaskText(event.target.value);updateTaskNow(false);};var deleteTask=function deleteTask(taskId,listId){onDeleteTask(taskId,listId);var data={id:taskId};fetch('/tasks-delete',{method:'POST',headers:{'Content-Type':'application/json;'},body:JSON.stringify(data)}).catch(function(){alert('Database error :((');});};return/*#__PURE__*/React.createElement(\"li\",{key:task.id,className:\"tasks__item\"},/*#__PURE__*/React.createElement(\"div\",{className:\"checkbox\"},/*#__PURE__*/React.createElement(\"input\",{id:\"check-\"+task.id,type:\"checkbox\",checked:task.completed,onChange:function onChange(){return checkTask(task);}}),/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"check-\"+task.id},/*#__PURE__*/React.createElement(\"svg\",{width:\"11\",height:\"8\",viewBox:\"0 0 11 8\",fill:\"none\",xmlns:\"http://www.w3.org/2000/svg\"},/*#__PURE__*/React.createElement(\"path\",{d:\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\",stroke:\"white\",strokeWidth:\"1.5\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})))),/*#__PURE__*/React.createElement(\"textarea\",{className:classNames(\"tasks__item-text\",{'line-through':task.completed}),type:\"text\",value:taskText,onChange:function onChange(event){return updateText(event);}}),/*#__PURE__*/React.createElement(\"div\",{className:\"tasks__item-buttons\"},/*#__PURE__*/React.createElement(\"div\",{className:\"tasks__item-submit\"},/*#__PURE__*/React.createElement(\"input\",{className:\"tasks__item-saveChange-check\",id:\"submit-\"+task.id,type:\"checkbox\",checked:taskIsUpdated,onChange:function onChange(){return updateTask(task.id,task.listId);}}),/*#__PURE__*/React.createElement(\"label\",{className:\"tasks__item-saveChange\",htmlFor:\"submit-\"+task.id},/*#__PURE__*/React.createElement(\"svg\",{version:\"1.1\",id:\"Capa_1\",xmlns:\"http://www.w3.org/2000/svg\",x:\"0px\",y:\"0px\",viewBox:\"0 0 49 49\",fill:\"#fff\"},/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"rect\",{x:\"27.5\",y:\"5\",width:\"6\",height:\"10\"}),/*#__PURE__*/React.createElement(\"path\",{d:\"M39.914,0H0.5v49h48V8.586L39.914,0z M10.5,2h26v16h-26V2z M39.5,47h-31V26h31V47z\"}),/*#__PURE__*/React.createElement(\"path\",{d:\"M13.5,32h7c0.553,0,1-0.447,1-1s-0.447-1-1-1h-7c-0.553,0-1,0.447-1,1S12.947,32,13.5,32z\"}),/*#__PURE__*/React.createElement(\"path\",{d:\"M13.5,36h10c0.553,0,1-0.447,1-1s-0.447-1-1-1h-10c-0.553,0-1,0.447-1,1S12.947,36,13.5,36z\"}),/*#__PURE__*/React.createElement(\"path\",{d:\"M26.5,36c0.27,0,0.52-0.11,0.71-0.29c0.18-0.19,0.29-0.45,0.29-0.71s-0.11-0.521-0.29-0.71c-0.37-0.37-1.04-0.37-1.41,0 c-0.19,0.189-0.3,0.439-0.3,0.71c0,0.27,0.109,0.52,0.29,0.71C25.979,35.89,26.229,36,26.5,36z\"}))))),/*#__PURE__*/React.createElement(\"img\",{className:\"tasks__item-delete\",onClick:function onClick(){return deleteTask(task.id,task.listId);},src:Remove,alt:\"Remove icon\"})));}","map":{"version":3,"sources":["/Users/maks/Git/todoapp/src/components/Task.jsx"],"names":["React","useState","classNames","axios","Task","task","checkTask","onDeleteTask","onUpdateTask","Remove","text","taskText","setTaskText","taskIsUpdated","updateTaskNow","updateTask","taskId","listId","data","id","newText","post","then","response","console","log","catch","alert","finally","updateText","event","target","value","deleteTask","fetch","method","headers","body","JSON","stringify","completed"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport classNames from 'classnames'\nimport axios from 'axios'\n\nexport default function Task({task, checkTask, onDeleteTask, onUpdateTask, Remove}) {\n\n    const [taskText, setTaskText] = useState(task.text)\n    const [taskIsUpdated, updateTaskNow] = useState(true)\n\n    const updateTask =  (taskId, listId) => {\n        onUpdateTask(taskId, listId, taskText)\n\n        let data = {id:taskId, newText:taskText};\n\n        axios.post('https://tojustdoit-api.herokuapp.com/tasks-update', data)\n        .then(function(response){\n            console.log(response);\n        //Perform action based on response\n            })\n            .catch(()=>{\n                alert('Database error :((')\n            }).finally(()=>{\n            updateTaskNow(true)\n        })\n        \n    }\n\n    const updateText = (event) =>{\n        setTaskText(event.target.value)\n        updateTaskNow(false)\n    }\n    \n    const deleteTask = (taskId, listId) => {\n        onDeleteTask(taskId, listId)\n        let data = {id:taskId};\n        fetch('/tasks-delete',{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json;'\n            },\n            body: JSON.stringify(data)})\n            .catch(()=>{\n                alert('Database error :((')\n            })\n    }\n    return (\n        <li key={task.id} className=\"tasks__item\">\n            <div className=\"checkbox\">\n                <input \n                id={\"check-\"+ task.id} \n                type=\"checkbox\" \n                checked={task.completed}\n                onChange={()=>checkTask(task)}\n                />\n                <label \n                htmlFor={\"check-\"+task.id} \n                >\n                    <svg width=\"11\" height=\"8\" viewBox=\"0 0 11 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\" stroke=\"white\" \n                        strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                    </svg>\n                </label>\n            </div> \n            <textarea className={classNames(\"tasks__item-text\", {'line-through':task.completed})} type=\"text\" value={taskText} \n            onChange={event=>updateText(event)}></textarea>\n            <div className=\"tasks__item-buttons\">\n                <div className=\"tasks__item-submit\">\n                    <input \n                    className=\"tasks__item-saveChange-check\"\n                    id={\"submit-\"+ task.id} \n                    type=\"checkbox\" \n                    checked={taskIsUpdated}\n                    onChange={()=>updateTask(task.id, task.listId)}\n                    />\n                    <label \n                    className=\"tasks__item-saveChange\"\n                    htmlFor={\"submit-\"+task.id} \n                    >\n                        <svg version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\"  x=\"0px\" y=\"0px\"\n                            viewBox=\"0 0 49 49\"  fill=\"#fff\">\n                        <g>\n                            <rect x=\"27.5\" y=\"5\" width=\"6\" height=\"10\"/>\n                            <path d=\"M39.914,0H0.5v49h48V8.586L39.914,0z M10.5,2h26v16h-26V2z M39.5,47h-31V26h31V47z\"/>\n                            <path d=\"M13.5,32h7c0.553,0,1-0.447,1-1s-0.447-1-1-1h-7c-0.553,0-1,0.447-1,1S12.947,32,13.5,32z\"/>\n                            <path d=\"M13.5,36h10c0.553,0,1-0.447,1-1s-0.447-1-1-1h-10c-0.553,0-1,0.447-1,1S12.947,36,13.5,36z\"/>\n                            <path d=\"M26.5,36c0.27,0,0.52-0.11,0.71-0.29c0.18-0.19,0.29-0.45,0.29-0.71s-0.11-0.521-0.29-0.71c-0.37-0.37-1.04-0.37-1.41,0\n                                c-0.19,0.189-0.3,0.439-0.3,0.71c0,0.27,0.109,0.52,0.29,0.71C25.979,35.89,26.229,36,26.5,36z\"/>\n                        </g>\n                        </svg>\n                    </label>\n                </div>\n                <img className=\"tasks__item-delete\"onClick={()=>deleteTask(task.id, task.listId)} src={Remove} alt=\"Remove icon\"/> \n            </div>\n        </li> \n    )\n}\n"]},"metadata":{},"sourceType":"module"}