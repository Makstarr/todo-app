{"ast":null,"code":"var _jsxFileName = \"/Users/maks/Git/todoapp/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport AddList from './components/AddList';\nimport List from './components/List';\nimport Tasks from './components/Tasks';\nimport listSvg from \"./assets/img/list.svg\";\nimport doIt from './assets/img/do-it.png';\nimport './css/reset.css';\nimport './css/index.min.css';\nimport './css/List.min.css';\nimport './css/AddList.min.css';\nimport './css/Tasks.min.css';\nimport './css/AddTasks.min.css';\n\nfunction App() {\n  const [lists, setLists] = useState(null);\n  const [colors, setColors] = useState(null);\n  const [activeItem, setActiveItem] = useState({\n    allTasks: true,\n    id: 0\n  });\n  let history = useHistory();\n  console.log(history);\n  useEffect(() => {\n    fetch('https://tojustdo-api.herokuapp.com/colors').then(res => res.json()).catch(function (error) {\n      alert(`Database failed :(((\\nTry to reload the page`);\n    }).then(data => {\n      setColors(data);\n    });\n    fetch('https://tojustdo-api.herokuapp.com/lists').then(res => res.json()).catch(function (error) {\n      alert(`Database failed :((`);\n    }).then(data => {\n      setLists(data);\n    });\n  }, []);\n\n  const onAddList = obj => {\n    setLists([...lists, obj]);\n  };\n\n  const onAddTask = (obj, id) => {\n    setLists(lists.map(i => {\n      if (i.id === id) {\n        i.tasks = [...i.tasks, obj];\n      }\n\n      return i;\n    }));\n  };\n\n  const onCompleteTask = (taskId, listId) => {\n    setLists(lists.map(list => {\n      if (list.id === listId) {\n        list.tasks.map(task => {\n          if (task.id === taskId) {\n            task.completed = !task.completed;\n          }\n\n          return task;\n        });\n      }\n\n      return list;\n    }));\n  };\n\n  const onEditTitle = (id, newTitle) => {\n    const newLists = lists.map(i => {\n      if (i.id === id) {\n        i.name = newTitle;\n      }\n\n      return i;\n    });\n    setLists(newLists);\n  };\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"todo__sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    items: [{\n      icon: /*#__PURE__*/React.createElement(\"img\", {\n        src: listSvg,\n        alt: \"list icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }),\n      name: 'All tasks',\n      allTasks: true,\n      active: true,\n      id: 0\n    }],\n    activeItem: activeItem,\n    onClickItem: i => {\n      i.active = true;\n      setActiveItem(i);\n    },\n    isRemovable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }), lists ? /*#__PURE__*/React.createElement(List, {\n    items: lists,\n    onRemove: id => setLists(lists.filter(item => item.id !== id)),\n    onClickItem: i => {\n      console.log(i); // history.push('/lists');\n\n      i.active = true;\n      setActiveItem(i);\n    },\n    activeItem: activeItem,\n    isRemovable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: 10 + 'px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, \"Loading...\"), /*#__PURE__*/React.createElement(AddList, {\n    onAdd: onAddList,\n    colors: colors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"shai\",\n    src: doIt,\n    alt: \"list icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"todo__tasks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, lists && lists.map(list => /*#__PURE__*/React.createElement(Tasks, {\n    onEditTitle: onEditTitle,\n    lists: [list],\n    onAddTask: onAddTask,\n    onCompleteTask: onCompleteTask,\n    onDeleteTask: (taskId, listId) => {\n      setLists(lists.map(list => {\n        if (list.id === listId) {\n          list.tasks = list.tasks.filter(item => item.id !== taskId);\n        }\n\n        return list;\n      }));\n    },\n    onUpdateTask: (taskId, listId, newText) => {\n      setLists(lists.map(list => {\n        if (list.id === listId) {\n          list.tasks.find(item => item.id === taskId).text = newText;\n        }\n\n        return list;\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }))), lists ? /*#__PURE__*/React.createElement(Tasks, {\n    onEditTitle: onEditTitle,\n    lists: !activeItem.allTasks ? [activeItem] : lists,\n    onAddTask: onAddTask,\n    onCompleteTask: onCompleteTask,\n    onDeleteTask: (taskId, listId) => {\n      setLists(lists.map(list => {\n        if (list.id === listId) {\n          list.tasks = list.tasks.filter(item => item.id !== taskId);\n        }\n\n        return list;\n      }));\n    },\n    onUpdateTask: (taskId, listId, newText) => {\n      setLists(lists.map(list => {\n        if (list.id === listId) {\n          list.tasks.find(item => item.id === taskId).text = newText;\n        }\n\n        return list;\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 18\n    }\n  }) : \"\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/maks/Git/todoapp/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","Link","useHistory","AddList","List","Tasks","doIt","App","lists","setLists","colors","setColors","activeItem","setActiveItem","allTasks","id","history","console","log","fetch","then","res","json","catch","error","alert","data","onAddList","obj","onAddTask","map","i","tasks","onCompleteTask","taskId","listId","list","task","completed","onEditTitle","newTitle","newLists","name","icon","listSvg","active","filter","item","padding","newText","find","text"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\"; \nimport { useHistory } from \"react-router-dom\";\nimport AddList from './components/AddList'\nimport List from './components/List'\nimport Tasks from './components/Tasks'\n\nimport listSvg from  './assets/img/list.svg'\nimport doIt from  './assets/img/do-it.png'\nimport './css/reset.css';\nimport './css/index.min.css';\nimport './css/List.min.css';\nimport './css/AddList.min.css';\nimport './css/Tasks.min.css';\nimport './css/AddTasks.min.css';\n\n\n\nfunction App() {\n  const [lists, setLists] = useState(null)\n  const [colors, setColors] = useState(null)\n  const [activeItem, setActiveItem] = useState({ \n    allTasks: true, id: 0\n   })\n  let history = useHistory();\n  console.log(history)\n  \n  useEffect(() => {\n    fetch('https://tojustdo-api.herokuapp.com/colors').then(res => res.json()).catch(function(error){\n      alert(`Database failed :(((\\nTry to reload the page`)}).then(data => {\n      setColors(data)\n    });\n    fetch('https://tojustdo-api.herokuapp.com/lists').then(res => res.json()).catch(function(error){\n      alert(`Database failed :((`)}).then(data => {\n      setLists(data)\n    });\n  }, []);\n  \n  const onAddList = (obj) =>{\n    setLists([...lists, obj])\n  }\n\n  const onAddTask = ((obj, id) =>{\n    setLists(\n      lists.map((i) => {\n        if (i.id === id){\n          i.tasks = [...i.tasks, obj]\n        }\n        return i;\n      })\n    );\n  })\n\n  const onCompleteTask=(taskId, listId)=>{\n    setLists(lists.map(list=>\n      {\n        if (list.id === listId)\n        {\n          list.tasks.map(task =>\n            {\n              if (task.id===taskId){\n                task.completed=!task.completed;\n              }\n              return task\n            }\n          )\n        }\n      return list;\n    }))\n  }\n\n  const onEditTitle = (id, newTitle) => {\n    const newLists = lists.map((i) => {\n      if (i.id===id){\n        i.name = newTitle;\n      }\n      return i\n    });\n    setLists(newLists)\n  }\n\n  return (\n    <Router>\n      <div className=\"todo\">\n        <section className=\"todo__sidebar\">\n          <List items= {[\n            { \n              icon: <img src={listSvg} alt=\"list icon\"/>,\n              name:'All tasks',\n              allTasks: true,\n              active:true,\n              id: 0\n            }\n          ]}\n          activeItem={activeItem}\n          onClickItem={(i) => {\n            i.active=true\n            setActiveItem(i)}}\n          isRemovable={false}/>\n          {lists?(\n          <List items= {lists} \n          onRemove = {(id)=>\n            setLists(lists.filter(item => item.id !== id))}\n          onClickItem={(i) => {\n            console.log(i)\n           // history.push('/lists');\n            i.active=true\n            setActiveItem(i)}}\n          activeItem={activeItem}\n          isRemovable/>\n          ) : <div style={{padding: 10 + 'px'}}>Loading...</div>}\n          <AddList onAdd={onAddList} colors={colors}/>\n          <img className =\"shai\"src={doIt} alt=\"list icon\"/>\n        </section>\n        <section className=\"todo__tasks\">\n          <Route exact path=\"/\">\n              { \n                lists && lists.map(list=>(\n                  <Tasks \n                    onEditTitle={onEditTitle} \n                    lists={[list]}\n                    onAddTask={onAddTask}\n                    onCompleteTask={onCompleteTask}\n                    onDeleteTask={(taskId, listId) =>{\n                        setLists(lists.map(list=>{\n                          if(list.id === listId){\n                            list.tasks = list.tasks.filter(item => item.id !== taskId)\n                          }\n                            return list;\n                          })\n                        );\n                      }\n                    }\n                    onUpdateTask={(taskId, listId, newText)=>{\n                      setLists(lists.map(list=>{\n                        if(list.id === listId){\n                          list.tasks.find(item => item.id === taskId).text = newText\n                        }\n                          return list;\n                        })\n                      );\n                    }\n                  }\n                    />)\n                )\n              }\n            </Route>\n          {lists?<Tasks \n          onEditTitle={onEditTitle} \n          lists={!activeItem.allTasks?[activeItem]:lists}\n          onAddTask={onAddTask}\n          onCompleteTask={onCompleteTask}\n          onDeleteTask={(taskId, listId) =>{\n              setLists(lists.map(list=>{\n                if(list.id === listId){\n                  list.tasks = list.tasks.filter(item => item.id !== taskId)\n                }\n                  return list;\n                })\n              );\n            }\n          }\n          onUpdateTask={(taskId, listId, newText)=>{\n            setLists(lists.map(list=>{\n              if(list.id === listId){\n                list.tasks.find(item => item.id === taskId).text = newText\n              }\n                return list;\n              })\n            );\n          }\n        }\n          />:\"\"}\n        </section>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}